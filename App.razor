<div style="max-width: 650px; max-height: 900px; margin: auto; padding: 24px; display: flex; flex-direction: column; gap: 24px;">
    <IgbGrid Data="_people"
             @ref="grid"
             PrimaryKey="@nameof(Person.Id)"
             AutoGenerate="false" 
             RowSelection="GridSelectionMode.Single">
        <IgbColumn Field="@nameof(Person.Id)" Header="Id" Width="auto"></IgbColumn>
        <IgbColumn Field="@nameof(Person.Name)" Header="氏名" ></IgbColumn>
        <IgbColumn Field="@nameof(Person.Age)" Header="年齢" DataType="GridColumnDataType.Number"></IgbColumn>
        <IgbColumn Field="@nameof(Person.JobTitle)" Header="職種" ></IgbColumn>
    </IgbGrid>
</div>

@code {
    private IgbGrid? grid;

    public class Person
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public int Age { get; set; }
        public string? JobTitle { get; set; }
    }

    private List<Person> _people = new()
    {
        new() { Id = 1, Name = "Bob", Age = 30, JobTitle = "Developer"},
        new() { Id = 2, Name = "Alice", Age = 25, JobTitle = "Support"},
        new() { Id = 3, Name = "John", Age = 40, JobTitle = "Manager"},
        new() { Id = 4, Name = "Emily", Age = 35, JobTitle = "Marketing"},
        new() { Id = 5, Name = "David", Age = 28, JobTitle = "Sales",}
    };


    // OnAfterRenderAsyncメソッドは、コンポーネントがレンダリングされた後に非同期的に実行されます
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // grid が準備完了であることを確認します
            await this.grid?.EnsureReady()!;
            // 選択したい行の主キーを設定します
            object[] array = new object[] { 3 };
            // 指定した行を選択します
            await this.grid?.SelectRowsAsync(array, true)!;
        }
    }
}
